// Code generated by MockGen. DO NOT EDIT.
// Source: ./diff_finder/finder.go
//
// Generated by this command:
//
//	mockgen -source=./diff_finder/finder.go -destination=./diff_finder/mocks/finder_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	diff_finder "file-diff-finder/diff_finder"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileDiffFinder is a mock of IFileDiffFinder interface.
type MockIFileDiffFinder struct {
	ctrl     *gomock.Controller
	recorder *MockIFileDiffFinderMockRecorder
}

// MockIFileDiffFinderMockRecorder is the mock recorder for MockIFileDiffFinder.
type MockIFileDiffFinderMockRecorder struct {
	mock *MockIFileDiffFinder
}

// NewMockIFileDiffFinder creates a new mock instance.
func NewMockIFileDiffFinder(ctrl *gomock.Controller) *MockIFileDiffFinder {
	mock := &MockIFileDiffFinder{ctrl: ctrl}
	mock.recorder = &MockIFileDiffFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileDiffFinder) EXPECT() *MockIFileDiffFinderMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockIFileDiffFinder) Content() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].(string)
	return ret0
}

// Content indicates an expected call of Content.
func (mr *MockIFileDiffFinderMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockIFileDiffFinder)(nil).Content))
}

// Diff mocks base method.
func (m *MockIFileDiffFinder) Diff(ctx context.Context, updatedFileText string) ([]diff_finder.UpdatedIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diff", ctx, updatedFileText)
	ret0, _ := ret[0].([]diff_finder.UpdatedIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Diff indicates an expected call of Diff.
func (mr *MockIFileDiffFinderMockRecorder) Diff(ctx, updatedFileText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockIFileDiffFinder)(nil).Diff), ctx, updatedFileText)
}

// ValidateVersion mocks base method.
func (m *MockIFileDiffFinder) ValidateVersion(version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVersion indicates an expected call of ValidateVersion.
func (mr *MockIFileDiffFinderMockRecorder) ValidateVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVersion", reflect.TypeOf((*MockIFileDiffFinder)(nil).ValidateVersion), version)
}

// Version mocks base method.
func (m *MockIFileDiffFinder) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockIFileDiffFinderMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockIFileDiffFinder)(nil).Version))
}
