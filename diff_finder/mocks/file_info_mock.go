// Code generated by MockGen. DO NOT EDIT.
// Source: ./diff_finder/file_info.go
//
// Generated by this command:
//
//	mockgen -source=./diff_finder/file_info.go -destination=./diff_finder/mocks/file_info_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileInformative is a mock of IFileInformative interface.
type MockIFileInformative struct {
	ctrl     *gomock.Controller
	recorder *MockIFileInformativeMockRecorder
}

// MockIFileInformativeMockRecorder is the mock recorder for MockIFileInformative.
type MockIFileInformativeMockRecorder struct {
	mock *MockIFileInformative
}

// NewMockIFileInformative creates a new mock instance.
func NewMockIFileInformative(ctrl *gomock.Controller) *MockIFileInformative {
	mock := &MockIFileInformative{ctrl: ctrl}
	mock.recorder = &MockIFileInformativeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileInformative) EXPECT() *MockIFileInformativeMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockIFileInformative) Content() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].(string)
	return ret0
}

// Content indicates an expected call of Content.
func (mr *MockIFileInformativeMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockIFileInformative)(nil).Content))
}

// ValidateVersion mocks base method.
func (m *MockIFileInformative) ValidateVersion(version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVersion indicates an expected call of ValidateVersion.
func (mr *MockIFileInformativeMockRecorder) ValidateVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVersion", reflect.TypeOf((*MockIFileInformative)(nil).ValidateVersion), version)
}

// Version mocks base method.
func (m *MockIFileInformative) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockIFileInformativeMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockIFileInformative)(nil).Version))
}
